package cmd

import (
	"fmt"
	"log"
	"os"
	"github.com/secretsm/sm"

	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

var secret string
var raw bool
var debug bool
var region string

var (
	SMCMD = &cobra.Command{
		Use:   "sm [subcommand]",
		Short: "work with aws secretsmanager",
	}
)

var (
	lsCMD = &cobra.Command{
		Use:     "list",
		Aliases: []string{"ls"},
		Short:   "list secrets",
		Run: func(cmd *cobra.Command, args []string) {
			sort := viper.GetBool("sort")
			maxResults := viper.GetInt64("max-results")
			sess, err := sm.CreateAWSSession(region)
			if err != nil {
				log.Fatalf("Error creating session: %v\n", err)
			}
			var nt *string
			secrets, nextToken, err := sm.ListSecrets(sess, nt, maxResults)
			if err != nil {
				log.Fatalf("Listing secrets error: %v\n", err)
			}
			// sm.PrintSecretList(secrets, debug, sort)
			for nextToken != nil {
				secrets2, nt, err := sm.ListSecrets(sess, nextToken, maxResults)
				if err != nil {
					log.Fatalf("Listing secrets error: %v\n", err)
				}
				if debug {
					fmt.Printf("Next token: %v\n", nt)
				}
				secrets = append(secrets, secrets2...)
				nextToken = nt
			}
			sm.PrintSecretList(secrets, debug, sort)
		},
	}
)

var (
	getValueCMD = &cobra.Command{
		Use:   "get-value",
		Short: "get secret value",
		Args:  cobra.ExactArgs(1),
		ValidArgsFunction: func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			sess, err := sm.CreateAWSSession(region)
			if err != nil {
				log.Fatalf("Error creating session: %v\n", err)
			}
			secretNames, err := sm.ListSecretsForComplete(sess)
			if err != nil {
				log.Fatalf("Error returning list of secrets: %v\n", err)
			}
			return secretNames, cobra.ShellCompDirectiveNoFileComp
		},
		Run: func(cmd *cobra.Command, args []string) {
			s := args[0]
			sess, err := sm.CreateAWSSession(region)
			if err != nil {
				log.Fatalf("Error creating session: %v\n", err)
			}
			if _, err := sm.GetSecretValue(sess, s, raw); err != nil {
				log.Fatalf("Getting secret value: %v\n", err)
			}
		},
	}
)

var (
	completionCmd = &cobra.Command{
		Use:   "completion",
		Short: "Generates bash completion script",
		Run: func(cmd *cobra.Command, args []string) {
			SMCMD.GenBashCompletion(os.Stdout)
		},
	}
)

func init() {
	cobra.OnInitialize(initConfig)
	SMCMD.PersistentFlags().StringP("region", "a", "", "aws region")
	SMCMD.PersistentFlags().BoolVarP(&debug, "debug", "d", false, "debug output")
	viper.BindPFlag("region", SMCMD.PersistentFlags().Lookup("region"))
	SMCMD.AddCommand(completionCmd)
	SMCMD.AddCommand(lsCMD)
	SMCMD.AddCommand(getValueCMD)
	getValueCMD.Flags().BoolVarP(&raw, "raw", "r", false, "raw secret output")
	lsCMD.Flags().BoolP("sort", "s", false, "sort list by name")
	lsCMD.Flags().Int64P("max-results", "m", 100, "max results returned")
	viper.BindPFlag("sort", lsCMD.Flags().Lookup("sort"))
	viper.BindPFlag("max-results", lsCMD.Flags().Lookup("max-results"))

	viper.BindEnv("region", "AWS_REGION")
}

func initConfig() {
	region = viper.GetString("region")
	if region == "" {
		log.Fatal("No region")
	}
}
